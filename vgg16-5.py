# -*- coding: utf-8 -*-
"""VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CiEHHRofMVfyTN4mFbzqihJ1qy8qcK5b
"""

from google.colab import drive

drive.mount('/content/drive');

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense,Flatten,Dropout
from keras import backend as k
from keras.applications import VGG16
from matplotlib import pyplot as plt

def prepro_data(pathTrain,pathTest,img_size,batch_size):
  
  if k.image_data_format() == 'channels_first':
    input_shape = (3,img_size[0],img_size[1])
  else:
    input_shape = (img_size[0],img_size[1],3)

  train_gen = ImageDataGenerator(rescale = 1./255)
  test_gen = ImageDataGenerator(rescale = 1./255)

  train_data = train_gen.flow_from_directory(
      pathTrain,
      target_size = img_size,
      # batch_size = batch_size,
      class_mode = 'categorical'
  ) 

  test_data = test_gen.flow_from_directory(
      pathTest,
      target_size = img_size,
      # batch_size = batch_size,
      class_mode = 'categorical'
  )

  print(" Train Data Image Shape = {}".format(train_data.image_shape))
  print(" Test Data Image Shape = {}".format(test_data.image_shape))
  print("Input Shape = {} ".format(input_shape))

  return train_data , test_data , input_shape

pathTrain  = '/content/drive/MyDrive/Alzheimer_s Dataset/test'
pathTest ='/content/drive/MyDrive/Alzheimer_s Dataset/test'

train_data , test_data, input_shape = prepro_data(pathTrain,pathTest,(225,225),8)

base_model = VGG16(weights = 'imagenet',include_top = False,
                      input_shape = input_shape)

from keras import regularizers

import tensorflow as tf

def show_result(history):
  plt.figure(figsize=(5,3))
  plt.title("Loss Training Vs Validation")
  plt.plot(history.history['loss'],color='blue',label='Train Loss')
  plt.plot(history.history['val_loss'],color='orange',label='Val Loss')
  plt.legend()
  plt.show()

  plt.figure(figsize=(5,3))
  plt.title("Accuracy Training Vs Validation")
  plt.plot(history.history['accuracy'],color='blue',label='Train Acc')
  plt.plot(history.history['val_accuracy'],color='orange',label='Val Acc')
  plt.legend()
  plt.show()

# Load the pre-trained VGG16 model
base_model = VGG16(input_shape=(224,224,3), include_top=False)

# Freeze the layers in the pre-trained model
for layer in base_model.layers:
    layer.trainable = False



model = Sequential()
model.add(base_model)
model.add(Flatten())
model.add(Dense(256, activation='relu', kernel_regularizer=regularizers.l2(0.01)))  # Add weight decay to the Dense layer
model.add(Dropout(0.2))
model.add(Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.01))) # Add weight decay to the Dense layer
model.add(Dropout(0.2))
model.add(Dense(64, activation='relu', kernel_regularizer=regularizers.l2(0.01)))  
model.add(Dropout(0.2))
model.add(Dense(4, activation='softmax'))

weight_decay = 0.001
# Compile the model
optimizer = tf.keras.optimizers.legacy.Adam(learning_rate=0.001, decay = weight_decay) 
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

from tensorflow import keras

history = model.fit(train_data,epochs=20,validation_data=test_data)
show_result(history)

print(model.summary())

model.evaluate(test_data)

model.save('/content/drive/MyDrive/model.h5')